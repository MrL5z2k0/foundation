/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.commons.tables.records;


import com.wuda.foundation.jooq.code.generation.commons.tables.TaskPhase;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 任务的某个阶段
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskPhaseRecord extends UpdatableRecordImpl<TaskPhaseRecord> implements Record10<ULong, ULong, UByte, UByte, UByte, LocalDateTime, ULong, LocalDateTime, ULong, ULong> {

    private static final long serialVersionUID = -2080713767;

    /**
     * Setter for <code>foundation_commons.task_phase.task_phase_id</code>.
     */
    public void setTaskPhaseId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.task_phase_id</code>.
     */
    public ULong getTaskPhaseId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>foundation_commons.task_phase.task_id</code>. 所属任务的ID
     */
    public void setTaskId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.task_id</code>. 所属任务的ID
     */
    public ULong getTaskId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>foundation_commons.task_phase.type</code>. 任务阶段的类型，比如创建阶段，清理阶段
     */
    public void setType(UByte value) {
        set(2, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.type</code>. 任务阶段的类型，比如创建阶段，清理阶段
     */
    public UByte getType() {
        return (UByte) get(2);
    }

    /**
     * Setter for <code>foundation_commons.task_phase.execute_status</code>. 当前阶段的状态
     */
    public void setExecuteStatus(UByte value) {
        set(3, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.execute_status</code>. 当前阶段的状态
     */
    public UByte getExecuteStatus() {
        return (UByte) get(3);
    }

    /**
     * Setter for <code>foundation_commons.task_phase.sequence_number</code>. 任务序列号，用于表明任务阶段的先后关系，数字越大，表明在阶段中越靠后执行
     */
    public void setSequenceNumber(UByte value) {
        set(4, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.sequence_number</code>. 任务序列号，用于表明任务阶段的先后关系，数字越大，表明在阶段中越靠后执行
     */
    public UByte getSequenceNumber() {
        return (UByte) get(4);
    }

    /**
     * Setter for <code>foundation_commons.task_phase.create_time</code>.
     */
    public void setCreateTime(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.create_time</code>.
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>foundation_commons.task_phase.create_user_id</code>.
     */
    public void setCreateUserId(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.create_user_id</code>.
     */
    public ULong getCreateUserId() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>foundation_commons.task_phase.last_modify_time</code>.
     */
    public void setLastModifyTime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.last_modify_time</code>.
     */
    public LocalDateTime getLastModifyTime() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>foundation_commons.task_phase.last_modify_user_id</code>.
     */
    public void setLastModifyUserId(ULong value) {
        set(8, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.last_modify_user_id</code>.
     */
    public ULong getLastModifyUserId() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>foundation_commons.task_phase.is_deleted</code>.
     */
    public void setIsDeleted(ULong value) {
        set(9, value);
    }

    /**
     * Getter for <code>foundation_commons.task_phase.is_deleted</code>.
     */
    public ULong getIsDeleted() {
        return (ULong) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, UByte, UByte, UByte, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<ULong, ULong, UByte, UByte, UByte, LocalDateTime, ULong, LocalDateTime, ULong, ULong> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return TaskPhase.TASK_PHASE.TASK_PHASE_ID;
    }

    @Override
    public Field<ULong> field2() {
        return TaskPhase.TASK_PHASE.TASK_ID;
    }

    @Override
    public Field<UByte> field3() {
        return TaskPhase.TASK_PHASE.TYPE;
    }

    @Override
    public Field<UByte> field4() {
        return TaskPhase.TASK_PHASE.EXECUTE_STATUS;
    }

    @Override
    public Field<UByte> field5() {
        return TaskPhase.TASK_PHASE.SEQUENCE_NUMBER;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return TaskPhase.TASK_PHASE.CREATE_TIME;
    }

    @Override
    public Field<ULong> field7() {
        return TaskPhase.TASK_PHASE.CREATE_USER_ID;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return TaskPhase.TASK_PHASE.LAST_MODIFY_TIME;
    }

    @Override
    public Field<ULong> field9() {
        return TaskPhase.TASK_PHASE.LAST_MODIFY_USER_ID;
    }

    @Override
    public Field<ULong> field10() {
        return TaskPhase.TASK_PHASE.IS_DELETED;
    }

    @Override
    public ULong component1() {
        return getTaskPhaseId();
    }

    @Override
    public ULong component2() {
        return getTaskId();
    }

    @Override
    public UByte component3() {
        return getType();
    }

    @Override
    public UByte component4() {
        return getExecuteStatus();
    }

    @Override
    public UByte component5() {
        return getSequenceNumber();
    }

    @Override
    public LocalDateTime component6() {
        return getCreateTime();
    }

    @Override
    public ULong component7() {
        return getCreateUserId();
    }

    @Override
    public LocalDateTime component8() {
        return getLastModifyTime();
    }

    @Override
    public ULong component9() {
        return getLastModifyUserId();
    }

    @Override
    public ULong component10() {
        return getIsDeleted();
    }

    @Override
    public ULong value1() {
        return getTaskPhaseId();
    }

    @Override
    public ULong value2() {
        return getTaskId();
    }

    @Override
    public UByte value3() {
        return getType();
    }

    @Override
    public UByte value4() {
        return getExecuteStatus();
    }

    @Override
    public UByte value5() {
        return getSequenceNumber();
    }

    @Override
    public LocalDateTime value6() {
        return getCreateTime();
    }

    @Override
    public ULong value7() {
        return getCreateUserId();
    }

    @Override
    public LocalDateTime value8() {
        return getLastModifyTime();
    }

    @Override
    public ULong value9() {
        return getLastModifyUserId();
    }

    @Override
    public ULong value10() {
        return getIsDeleted();
    }

    @Override
    public TaskPhaseRecord value1(ULong value) {
        setTaskPhaseId(value);
        return this;
    }

    @Override
    public TaskPhaseRecord value2(ULong value) {
        setTaskId(value);
        return this;
    }

    @Override
    public TaskPhaseRecord value3(UByte value) {
        setType(value);
        return this;
    }

    @Override
    public TaskPhaseRecord value4(UByte value) {
        setExecuteStatus(value);
        return this;
    }

    @Override
    public TaskPhaseRecord value5(UByte value) {
        setSequenceNumber(value);
        return this;
    }

    @Override
    public TaskPhaseRecord value6(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public TaskPhaseRecord value7(ULong value) {
        setCreateUserId(value);
        return this;
    }

    @Override
    public TaskPhaseRecord value8(LocalDateTime value) {
        setLastModifyTime(value);
        return this;
    }

    @Override
    public TaskPhaseRecord value9(ULong value) {
        setLastModifyUserId(value);
        return this;
    }

    @Override
    public TaskPhaseRecord value10(ULong value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public TaskPhaseRecord values(ULong value1, ULong value2, UByte value3, UByte value4, UByte value5, LocalDateTime value6, ULong value7, LocalDateTime value8, ULong value9, ULong value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskPhaseRecord
     */
    public TaskPhaseRecord() {
        super(TaskPhase.TASK_PHASE);
    }

    /**
     * Create a detached, initialised TaskPhaseRecord
     */
    public TaskPhaseRecord(ULong taskPhaseId, ULong taskId, UByte type, UByte executeStatus, UByte sequenceNumber, LocalDateTime createTime, ULong createUserId, LocalDateTime lastModifyTime, ULong lastModifyUserId, ULong isDeleted) {
        super(TaskPhase.TASK_PHASE);

        set(0, taskPhaseId);
        set(1, taskId);
        set(2, type);
        set(3, executeStatus);
        set(4, sequenceNumber);
        set(5, createTime);
        set(6, createUserId);
        set(7, lastModifyTime);
        set(8, lastModifyUserId);
        set(9, isDeleted);
    }
}
