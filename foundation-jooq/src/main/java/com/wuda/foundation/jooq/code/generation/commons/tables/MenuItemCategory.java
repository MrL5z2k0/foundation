/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.commons.tables;


import com.wuda.foundation.jooq.code.generation.commons.FoundationCommons;
import com.wuda.foundation.jooq.code.generation.commons.Indexes;
import com.wuda.foundation.jooq.code.generation.commons.Keys;
import com.wuda.foundation.jooq.code.generation.commons.tables.records.MenuItemCategoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 物品分类
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MenuItemCategory extends TableImpl<MenuItemCategoryRecord> {

    private static final long serialVersionUID = 968966052;

    /**
     * The reference instance of <code>foundation_commons.menu_item_category</code>
     */
    public static final MenuItemCategory MENU_ITEM_CATEGORY = new MenuItemCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MenuItemCategoryRecord> getRecordType() {
        return MenuItemCategoryRecord.class;
    }

    /**
     * The column <code>foundation_commons.menu_item_category.menu_item_category_id</code>. identifier
     */
    public final TableField<MenuItemCategoryRecord, ULong> MENU_ITEM_CATEGORY_ID = createField(DSL.name("menu_item_category_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "identifier");

    /**
     * The column <code>foundation_commons.menu_item_category.menu_id</code>. 一个分类只能属于一个菜单，即使多个菜单之间很相似，但是也还是各自维护，以免造成不必要的数据之间相互影响，导致维护起来会很麻烦。
     */
    public final TableField<MenuItemCategoryRecord, ULong> MENU_ID = createField(DSL.name("menu_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "一个分类只能属于一个菜单，即使多个菜单之间很相似，但是也还是各自维护，以免造成不必要的数据之间相互影响，导致维护起来会很麻烦。");

    /**
     * The column <code>foundation_commons.menu_item_category.parent_menu_item_category_id</code>. 父节点ID
     */
    public final TableField<MenuItemCategoryRecord, ULong> PARENT_MENU_ITEM_CATEGORY_ID = createField(DSL.name("parent_menu_item_category_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "父节点ID");

    /**
     * The column <code>foundation_commons.menu_item_category.root_menu_item_category_id</code>.
     */
    public final TableField<MenuItemCategoryRecord, ULong> ROOT_MENU_ITEM_CATEGORY_ID = createField(DSL.name("root_menu_item_category_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.menu_item_category.depth</code>. depth
     */
    public final TableField<MenuItemCategoryRecord, UByte> DEPTH = createField(DSL.name("depth"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "depth");

    /**
     * The column <code>foundation_commons.menu_item_category.name</code>. 分类名称
     */
    public final TableField<MenuItemCategoryRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "分类名称");

    /**
     * The column <code>foundation_commons.menu_item_category.description</code>. 描述
     */
    public final TableField<MenuItemCategoryRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "描述");

    /**
     * The column <code>foundation_commons.menu_item_category.create_time</code>.
     */
    public final TableField<MenuItemCategoryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.menu_item_category.create_user_id</code>.
     */
    public final TableField<MenuItemCategoryRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.menu_item_category.last_modify_time</code>.
     */
    public final TableField<MenuItemCategoryRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.menu_item_category.last_modify_user_id</code>.
     */
    public final TableField<MenuItemCategoryRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.menu_item_category.is_deleted</code>.
     */
    public final TableField<MenuItemCategoryRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_commons.menu_item_category</code> table reference
     */
    public MenuItemCategory() {
        this(DSL.name("menu_item_category"), null);
    }

    /**
     * Create an aliased <code>foundation_commons.menu_item_category</code> table reference
     */
    public MenuItemCategory(String alias) {
        this(DSL.name(alias), MENU_ITEM_CATEGORY);
    }

    /**
     * Create an aliased <code>foundation_commons.menu_item_category</code> table reference
     */
    public MenuItemCategory(Name alias) {
        this(alias, MENU_ITEM_CATEGORY);
    }

    private MenuItemCategory(Name alias, Table<MenuItemCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private MenuItemCategory(Name alias, Table<MenuItemCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("物品分类"), TableOptions.table());
    }

    public <O extends Record> MenuItemCategory(Table<O> child, ForeignKey<O, MenuItemCategoryRecord> key) {
        super(child, key, MENU_ITEM_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return FoundationCommons.FOUNDATION_COMMONS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MENU_ITEM_CATEGORY_IDX_PARENT, Indexes.MENU_ITEM_CATEGORY_IDX_ROOT);
    }

    @Override
    public Identity<MenuItemCategoryRecord, ULong> getIdentity() {
        return Keys.IDENTITY_MENU_ITEM_CATEGORY;
    }

    @Override
    public UniqueKey<MenuItemCategoryRecord> getPrimaryKey() {
        return Keys.KEY_MENU_ITEM_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<MenuItemCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<MenuItemCategoryRecord>>asList(Keys.KEY_MENU_ITEM_CATEGORY_PRIMARY);
    }

    @Override
    public MenuItemCategory as(String alias) {
        return new MenuItemCategory(DSL.name(alias), this);
    }

    @Override
    public MenuItemCategory as(Name alias) {
        return new MenuItemCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuItemCategory rename(String name) {
        return new MenuItemCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuItemCategory rename(Name name) {
        return new MenuItemCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<ULong, ULong, ULong, ULong, UByte, String, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
