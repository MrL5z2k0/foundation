/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.commons.tables;


import com.wuda.foundation.jooq.code.generation.commons.FoundationCommons;
import com.wuda.foundation.jooq.code.generation.commons.Indexes;
import com.wuda.foundation.jooq.code.generation.commons.Keys;
import com.wuda.foundation.jooq.code.generation.commons.tables.records.PropertyKeyDefinitionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * property key 的定义，就好像是数据库表中列的定义是类似的
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PropertyKeyDefinition extends TableImpl<PropertyKeyDefinitionRecord> {

    private static final long serialVersionUID = 1983661709;

    /**
     * The reference instance of <code>foundation_commons.property_key_definition</code>
     */
    public static final PropertyKeyDefinition PROPERTY_KEY_DEFINITION = new PropertyKeyDefinition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropertyKeyDefinitionRecord> getRecordType() {
        return PropertyKeyDefinitionRecord.class;
    }

    /**
     * The column <code>foundation_commons.property_key_definition.property_definition_id</code>.
     */
    public final TableField<PropertyKeyDefinitionRecord, ULong> PROPERTY_DEFINITION_ID = createField(DSL.name("property_definition_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_commons.property_key_definition.property_key_id</code>. 属性值ID
     */
    public final TableField<PropertyKeyDefinitionRecord, ULong> PROPERTY_KEY_ID = createField(DSL.name("property_key_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "属性值ID");

    /**
     * The column <code>foundation_commons.property_key_definition.data_type</code>. 数据类型，格式是schema:datatype。比如：MySQL:VARCHAR
     */
    public final TableField<PropertyKeyDefinitionRecord, String> DATA_TYPE = createField(DSL.name("data_type"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "数据类型，格式是schema:datatype。比如：MySQL:VARCHAR");

    /**
     * The column <code>foundation_commons.property_key_definition.multi_valued</code>. 是否可以有多个值
     */
    public final TableField<PropertyKeyDefinitionRecord, Boolean> MULTI_VALUED = createField(DSL.name("multi_valued"), org.jooq.impl.SQLDataType.BIT.nullable(false), this, "是否可以有多个值");

    /**
     * The column <code>foundation_commons.property_key_definition.create_time</code>.
     */
    public final TableField<PropertyKeyDefinitionRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.property_key_definition.create_user_id</code>.
     */
    public final TableField<PropertyKeyDefinitionRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.property_key_definition.last_modify_time</code>.
     */
    public final TableField<PropertyKeyDefinitionRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.property_key_definition.last_modify_user_id</code>.
     */
    public final TableField<PropertyKeyDefinitionRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.property_key_definition.is_deleted</code>.
     */
    public final TableField<PropertyKeyDefinitionRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_commons.property_key_definition</code> table reference
     */
    public PropertyKeyDefinition() {
        this(DSL.name("property_key_definition"), null);
    }

    /**
     * Create an aliased <code>foundation_commons.property_key_definition</code> table reference
     */
    public PropertyKeyDefinition(String alias) {
        this(DSL.name(alias), PROPERTY_KEY_DEFINITION);
    }

    /**
     * Create an aliased <code>foundation_commons.property_key_definition</code> table reference
     */
    public PropertyKeyDefinition(Name alias) {
        this(alias, PROPERTY_KEY_DEFINITION);
    }

    private PropertyKeyDefinition(Name alias, Table<PropertyKeyDefinitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private PropertyKeyDefinition(Name alias, Table<PropertyKeyDefinitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("property key 的定义，就好像是数据库表中列的定义是类似的"), TableOptions.table());
    }

    public <O extends Record> PropertyKeyDefinition(Table<O> child, ForeignKey<O, PropertyKeyDefinitionRecord> key) {
        super(child, key, PROPERTY_KEY_DEFINITION);
    }

    @Override
    public Schema getSchema() {
        return FoundationCommons.FOUNDATION_COMMONS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROPERTY_KEY_DEFINITION_FK_ATTRIBUTE_KEY_ID);
    }

    @Override
    public Identity<PropertyKeyDefinitionRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PROPERTY_KEY_DEFINITION;
    }

    @Override
    public UniqueKey<PropertyKeyDefinitionRecord> getPrimaryKey() {
        return Keys.KEY_PROPERTY_KEY_DEFINITION_PRIMARY;
    }

    @Override
    public List<UniqueKey<PropertyKeyDefinitionRecord>> getKeys() {
        return Arrays.<UniqueKey<PropertyKeyDefinitionRecord>>asList(Keys.KEY_PROPERTY_KEY_DEFINITION_PRIMARY);
    }

    @Override
    public PropertyKeyDefinition as(String alias) {
        return new PropertyKeyDefinition(DSL.name(alias), this);
    }

    @Override
    public PropertyKeyDefinition as(Name alias) {
        return new PropertyKeyDefinition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyKeyDefinition rename(String name) {
        return new PropertyKeyDefinition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyKeyDefinition rename(Name name) {
        return new PropertyKeyDefinition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, ULong, String, Boolean, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
