/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.commons.tables;


import com.wuda.foundation.jooq.code.generation.commons.FoundationCommons;
import com.wuda.foundation.jooq.code.generation.commons.Keys;
import com.wuda.foundation.jooq.code.generation.commons.tables.records.PhoneRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 电话信息。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Phone extends TableImpl<PhoneRecord> {

    private static final long serialVersionUID = 1170389599;

    /**
     * The reference instance of <code>foundation_commons.phone</code>
     */
    public static final Phone PHONE = new Phone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhoneRecord> getRecordType() {
        return PhoneRecord.class;
    }

    /**
     * The column <code>foundation_commons.phone.phone_id</code>.
     */
    public final TableField<PhoneRecord, ULong> PHONE_ID = createField(DSL.name("phone_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_commons.phone.number</code>. 电话号码
     */
    public final TableField<PhoneRecord, String> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "电话号码");

    /**
     * The column <code>foundation_commons.phone.type</code>. 电话类型。用于区分手机，-固话等。注意：不是用来区分【客服电话还是400电话】这种类型，这些属于业务，应该由具体的业务表关联到这个表。
     */
    public final TableField<PhoneRecord, UByte> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "电话类型。用于区分手机，-固话等。注意：不是用来区分【客服电话还是400电话】这种类型，这些属于业务，应该由具体的业务表关联到这个表。");

    /**
     * The column <code>foundation_commons.phone.state</code>. 手机状态
     */
    public final TableField<PhoneRecord, UByte> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "手机状态");

    /**
     * The column <code>foundation_commons.phone.create_time</code>.
     */
    public final TableField<PhoneRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.phone.create_user_id</code>.
     */
    public final TableField<PhoneRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.phone.last_modify_time</code>.
     */
    public final TableField<PhoneRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.phone.last_modify_user_id</code>.
     */
    public final TableField<PhoneRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.phone.is_deleted</code>.
     */
    public final TableField<PhoneRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_commons.phone</code> table reference
     */
    public Phone() {
        this(DSL.name("phone"), null);
    }

    /**
     * Create an aliased <code>foundation_commons.phone</code> table reference
     */
    public Phone(String alias) {
        this(DSL.name(alias), PHONE);
    }

    /**
     * Create an aliased <code>foundation_commons.phone</code> table reference
     */
    public Phone(Name alias) {
        this(alias, PHONE);
    }

    private Phone(Name alias, Table<PhoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private Phone(Name alias, Table<PhoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("电话信息。"), TableOptions.table());
    }

    public <O extends Record> Phone(Table<O> child, ForeignKey<O, PhoneRecord> key) {
        super(child, key, PHONE);
    }

    @Override
    public Schema getSchema() {
        return FoundationCommons.FOUNDATION_COMMONS;
    }

    @Override
    public Identity<PhoneRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PHONE;
    }

    @Override
    public UniqueKey<PhoneRecord> getPrimaryKey() {
        return Keys.KEY_PHONE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PhoneRecord>> getKeys() {
        return Arrays.<UniqueKey<PhoneRecord>>asList(Keys.KEY_PHONE_PRIMARY, Keys.KEY_PHONE_IDX_PHONE_NUMBER);
    }

    @Override
    public Phone as(String alias) {
        return new Phone(DSL.name(alias), this);
    }

    @Override
    public Phone as(Name alias) {
        return new Phone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phone rename(String name) {
        return new Phone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phone rename(Name name) {
        return new Phone(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, String, UByte, UByte, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
