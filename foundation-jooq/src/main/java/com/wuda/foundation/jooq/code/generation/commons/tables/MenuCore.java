/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.commons.tables;


import com.wuda.foundation.jooq.code.generation.commons.FoundationCommons;
import com.wuda.foundation.jooq.code.generation.commons.Keys;
import com.wuda.foundation.jooq.code.generation.commons.tables.records.MenuCoreRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * 菜单核心信息。一个站点，可以制作多个菜单，比如为A场景制作一份菜单，为B场景制作一份菜单。每个菜单有它自己【独立的分类】，因为每个菜单的内容都不一样；但是最底层的菜单项是共享的，因为站点所能提供的功能是一致的，只是每个菜单组合了不同的功能而已。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MenuCore extends TableImpl<MenuCoreRecord> {

    private static final long serialVersionUID = -282328300;

    /**
     * The reference instance of <code>foundation_commons.menu_core</code>
     */
    public static final MenuCore MENU_CORE = new MenuCore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MenuCoreRecord> getRecordType() {
        return MenuCoreRecord.class;
    }

    /**
     * The column <code>foundation_commons.menu_core.menu_core_id</code>.
     */
    public final TableField<MenuCoreRecord, ULong> MENU_CORE_ID = createField(DSL.name("menu_core_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_commons.menu_core.menu_id</code>.
     */
    public final TableField<MenuCoreRecord, ULong> MENU_ID = createField(DSL.name("menu_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.menu_core.create_time</code>.
     */
    public final TableField<MenuCoreRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.menu_core.create_user_id</code>.
     */
    public final TableField<MenuCoreRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.menu_core.last_modify_time</code>.
     */
    public final TableField<MenuCoreRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.menu_core.last_modify_user_id</code>.
     */
    public final TableField<MenuCoreRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.menu_core.is_deleted</code>.
     */
    public final TableField<MenuCoreRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_commons.menu_core</code> table reference
     */
    public MenuCore() {
        this(DSL.name("menu_core"), null);
    }

    /**
     * Create an aliased <code>foundation_commons.menu_core</code> table reference
     */
    public MenuCore(String alias) {
        this(DSL.name(alias), MENU_CORE);
    }

    /**
     * Create an aliased <code>foundation_commons.menu_core</code> table reference
     */
    public MenuCore(Name alias) {
        this(alias, MENU_CORE);
    }

    private MenuCore(Name alias, Table<MenuCoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private MenuCore(Name alias, Table<MenuCoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("菜单核心信息。一个站点，可以制作多个菜单，比如为A场景制作一份菜单，为B场景制作一份菜单。每个菜单有它自己【独立的分类】，因为每个菜单的内容都不一样；但是最底层的菜单项是共享的，因为站点所能提供的功能是一致的，只是每个菜单组合了不同的功能而已。"), TableOptions.table());
    }

    public <O extends Record> MenuCore(Table<O> child, ForeignKey<O, MenuCoreRecord> key) {
        super(child, key, MENU_CORE);
    }

    @Override
    public Schema getSchema() {
        return FoundationCommons.FOUNDATION_COMMONS;
    }

    @Override
    public Identity<MenuCoreRecord, ULong> getIdentity() {
        return Keys.IDENTITY_MENU_CORE;
    }

    @Override
    public UniqueKey<MenuCoreRecord> getPrimaryKey() {
        return Keys.KEY_MENU_CORE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MenuCoreRecord>> getKeys() {
        return Arrays.<UniqueKey<MenuCoreRecord>>asList(Keys.KEY_MENU_CORE_PRIMARY);
    }

    @Override
    public MenuCore as(String alias) {
        return new MenuCore(DSL.name(alias), this);
    }

    @Override
    public MenuCore as(Name alias) {
        return new MenuCore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuCore rename(String name) {
        return new MenuCore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuCore rename(Name name) {
        return new MenuCore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, ULong, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
