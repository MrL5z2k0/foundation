/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.commons.tables;


import com.wuda.foundation.jooq.code.generation.commons.FoundationCommons;
import com.wuda.foundation.jooq.code.generation.commons.Indexes;
import com.wuda.foundation.jooq.code.generation.commons.Keys;
import com.wuda.foundation.jooq.code.generation.commons.tables.records.MenuItemBelongsToCategoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * 表示menu item所属的分类
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MenuItemBelongsToCategory extends TableImpl<MenuItemBelongsToCategoryRecord> {

    private static final long serialVersionUID = -1886402356;

    /**
     * The reference instance of <code>foundation_commons.menu_item_belongs_to_category</code>
     */
    public static final MenuItemBelongsToCategory MENU_ITEM_BELONGS_TO_CATEGORY = new MenuItemBelongsToCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MenuItemBelongsToCategoryRecord> getRecordType() {
        return MenuItemBelongsToCategoryRecord.class;
    }

    /**
     * The column <code>foundation_commons.menu_item_belongs_to_category.id</code>.
     */
    public final TableField<MenuItemBelongsToCategoryRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_commons.menu_item_belongs_to_category.menu_item_id</code>.
     */
    public final TableField<MenuItemBelongsToCategoryRecord, ULong> MENU_ITEM_ID = createField(DSL.name("menu_item_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.menu_item_belongs_to_category.menu_item_category_id</code>. 在数据库设计方面至少一个menu item可以属于多个category，这样可以为以后留扩展空间，比如即使同一个站点，可以制作多个menu；或者比如拥有多个店铺的电商平台，每个店铺有自己的menu，等等这样的需求。
     */
    public final TableField<MenuItemBelongsToCategoryRecord, ULong> MENU_ITEM_CATEGORY_ID = createField(DSL.name("menu_item_category_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "在数据库设计方面至少一个menu item可以属于多个category，这样可以为以后留扩展空间，比如即使同一个站点，可以制作多个menu；或者比如拥有多个店铺的电商平台，每个店铺有自己的menu，等等这样的需求。");

    /**
     * The column <code>foundation_commons.menu_item_belongs_to_category.create_time</code>.
     */
    public final TableField<MenuItemBelongsToCategoryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.menu_item_belongs_to_category.create_user_id</code>.
     */
    public final TableField<MenuItemBelongsToCategoryRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.menu_item_belongs_to_category.last_modify_time</code>.
     */
    public final TableField<MenuItemBelongsToCategoryRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.menu_item_belongs_to_category.last_modify_user_id</code>.
     */
    public final TableField<MenuItemBelongsToCategoryRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.menu_item_belongs_to_category.is_deleted</code>.
     */
    public final TableField<MenuItemBelongsToCategoryRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_commons.menu_item_belongs_to_category</code> table reference
     */
    public MenuItemBelongsToCategory() {
        this(DSL.name("menu_item_belongs_to_category"), null);
    }

    /**
     * Create an aliased <code>foundation_commons.menu_item_belongs_to_category</code> table reference
     */
    public MenuItemBelongsToCategory(String alias) {
        this(DSL.name(alias), MENU_ITEM_BELONGS_TO_CATEGORY);
    }

    /**
     * Create an aliased <code>foundation_commons.menu_item_belongs_to_category</code> table reference
     */
    public MenuItemBelongsToCategory(Name alias) {
        this(alias, MENU_ITEM_BELONGS_TO_CATEGORY);
    }

    private MenuItemBelongsToCategory(Name alias, Table<MenuItemBelongsToCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private MenuItemBelongsToCategory(Name alias, Table<MenuItemBelongsToCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("表示menu item所属的分类"), TableOptions.table());
    }

    public <O extends Record> MenuItemBelongsToCategory(Table<O> child, ForeignKey<O, MenuItemBelongsToCategoryRecord> key) {
        super(child, key, MENU_ITEM_BELONGS_TO_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return FoundationCommons.FOUNDATION_COMMONS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MENU_ITEM_BELONGS_TO_CATEGORY_IDX_ITEM_ID);
    }

    @Override
    public Identity<MenuItemBelongsToCategoryRecord, ULong> getIdentity() {
        return Keys.IDENTITY_MENU_ITEM_BELONGS_TO_CATEGORY;
    }

    @Override
    public UniqueKey<MenuItemBelongsToCategoryRecord> getPrimaryKey() {
        return Keys.KEY_MENU_ITEM_BELONGS_TO_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<MenuItemBelongsToCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<MenuItemBelongsToCategoryRecord>>asList(Keys.KEY_MENU_ITEM_BELONGS_TO_CATEGORY_PRIMARY);
    }

    @Override
    public MenuItemBelongsToCategory as(String alias) {
        return new MenuItemBelongsToCategory(DSL.name(alias), this);
    }

    @Override
    public MenuItemBelongsToCategory as(Name alias) {
        return new MenuItemBelongsToCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuItemBelongsToCategory rename(String name) {
        return new MenuItemBelongsToCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuItemBelongsToCategory rename(Name name) {
        return new MenuItemBelongsToCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, ULong, ULong, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
