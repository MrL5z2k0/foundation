/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.commons.tables;


import com.wuda.foundation.jooq.code.generation.commons.FoundationCommons;
import com.wuda.foundation.jooq.code.generation.commons.Keys;
import com.wuda.foundation.jooq.code.generation.commons.tables.records.FlowHistoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 流程处理历史记录
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlowHistory extends TableImpl<FlowHistoryRecord> {

    private static final long serialVersionUID = -1123722336;

    /**
     * The reference instance of <code>foundation_commons.flow_history</code>
     */
    public static final FlowHistory FLOW_HISTORY = new FlowHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlowHistoryRecord> getRecordType() {
        return FlowHistoryRecord.class;
    }

    /**
     * The column <code>foundation_commons.flow_history.flow_history_id</code>.
     */
    public final TableField<FlowHistoryRecord, ULong> FLOW_HISTORY_ID = createField(DSL.name("flow_history_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.flow_history.current_state</code>. 当前状态
     */
    public final TableField<FlowHistoryRecord, UByte> CURRENT_STATE = createField(DSL.name("current_state"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "当前状态");

    /**
     * The column <code>foundation_commons.flow_history.event</code>. 触发状态变化的事件
     */
    public final TableField<FlowHistoryRecord, UByte> EVENT = createField(DSL.name("event"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "触发状态变化的事件");

    /**
     * The column <code>foundation_commons.flow_history.next_state</code>. 下一个状态
     */
    public final TableField<FlowHistoryRecord, UByte> NEXT_STATE = createField(DSL.name("next_state"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "下一个状态");

    /**
     * The column <code>foundation_commons.flow_history.flow_version</code>. 流程的版本
     */
    public final TableField<FlowHistoryRecord, UByte> FLOW_VERSION = createField(DSL.name("flow_version"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "流程的版本");

    /**
     * The column <code>foundation_commons.flow_history.description</code>. 描述信息
     */
    public final TableField<FlowHistoryRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "描述信息");

    /**
     * The column <code>foundation_commons.flow_history.create_time</code>.
     */
    public final TableField<FlowHistoryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.flow_history.create_user_id</code>.
     */
    public final TableField<FlowHistoryRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.flow_history.last_modify_time</code>.
     */
    public final TableField<FlowHistoryRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.flow_history.last_modify_user_id</code>.
     */
    public final TableField<FlowHistoryRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.flow_history.is_deleted</code>.
     */
    public final TableField<FlowHistoryRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_commons.flow_history</code> table reference
     */
    public FlowHistory() {
        this(DSL.name("flow_history"), null);
    }

    /**
     * Create an aliased <code>foundation_commons.flow_history</code> table reference
     */
    public FlowHistory(String alias) {
        this(DSL.name(alias), FLOW_HISTORY);
    }

    /**
     * Create an aliased <code>foundation_commons.flow_history</code> table reference
     */
    public FlowHistory(Name alias) {
        this(alias, FLOW_HISTORY);
    }

    private FlowHistory(Name alias, Table<FlowHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private FlowHistory(Name alias, Table<FlowHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("流程处理历史记录"), TableOptions.table());
    }

    public <O extends Record> FlowHistory(Table<O> child, ForeignKey<O, FlowHistoryRecord> key) {
        super(child, key, FLOW_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return FoundationCommons.FOUNDATION_COMMONS;
    }

    @Override
    public UniqueKey<FlowHistoryRecord> getPrimaryKey() {
        return Keys.KEY_FLOW_HISTORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<FlowHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<FlowHistoryRecord>>asList(Keys.KEY_FLOW_HISTORY_PRIMARY);
    }

    @Override
    public FlowHistory as(String alias) {
        return new FlowHistory(DSL.name(alias), this);
    }

    @Override
    public FlowHistory as(Name alias) {
        return new FlowHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FlowHistory rename(String name) {
        return new FlowHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FlowHistory rename(Name name) {
        return new FlowHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, UByte, UByte, UByte, UByte, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
