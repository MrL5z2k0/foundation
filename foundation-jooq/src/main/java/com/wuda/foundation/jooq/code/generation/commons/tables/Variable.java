/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.commons.tables;


import com.wuda.foundation.jooq.code.generation.commons.FoundationCommons;
import com.wuda.foundation.jooq.code.generation.commons.Keys;
import com.wuda.foundation.jooq.code.generation.commons.tables.records.VariableRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 简单的变量，使用name-value pair表示
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Variable extends TableImpl<VariableRecord> {

    private static final long serialVersionUID = 478771397;

    /**
     * The reference instance of <code>foundation_commons.variable</code>
     */
    public static final Variable VARIABLE = new Variable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VariableRecord> getRecordType() {
        return VariableRecord.class;
    }

    /**
     * The column <code>foundation_commons.variable.variable_id</code>.
     */
    public final TableField<VariableRecord, ULong> VARIABLE_ID = createField(DSL.name("variable_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_commons.variable.name</code>. 变量的名称
     */
    public final TableField<VariableRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "变量的名称");

    /**
     * The column <code>foundation_commons.variable.value</code>. 变量的值
     */
    public final TableField<VariableRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "变量的值");

    /**
     * The column <code>foundation_commons.variable.type</code>. 变量的类型
     */
    public final TableField<VariableRecord, UByte> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "变量的类型");

    /**
     * The column <code>foundation_commons.variable.owner_type</code>. 拥有者的类型
     */
    public final TableField<VariableRecord, UByte> OWNER_TYPE = createField(DSL.name("owner_type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "拥有者的类型");

    /**
     * The column <code>foundation_commons.variable.owner_identifier</code>. 拥有者的唯一标记
     */
    public final TableField<VariableRecord, ULong> OWNER_IDENTIFIER = createField(DSL.name("owner_identifier"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "拥有者的唯一标记");

    /**
     * The column <code>foundation_commons.variable.description</code>. 描述信息
     */
    public final TableField<VariableRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "描述信息");

    /**
     * The column <code>foundation_commons.variable.create_time</code>.
     */
    public final TableField<VariableRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.variable.create_user_id</code>.
     */
    public final TableField<VariableRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.variable.last_modify_time</code>.
     */
    public final TableField<VariableRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_commons.variable.last_modify_user_id</code>.
     */
    public final TableField<VariableRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_commons.variable.is_deleted</code>.
     */
    public final TableField<VariableRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_commons.variable</code> table reference
     */
    public Variable() {
        this(DSL.name("variable"), null);
    }

    /**
     * Create an aliased <code>foundation_commons.variable</code> table reference
     */
    public Variable(String alias) {
        this(DSL.name(alias), VARIABLE);
    }

    /**
     * Create an aliased <code>foundation_commons.variable</code> table reference
     */
    public Variable(Name alias) {
        this(alias, VARIABLE);
    }

    private Variable(Name alias, Table<VariableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Variable(Name alias, Table<VariableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("简单的变量，使用name-value pair表示"), TableOptions.table());
    }

    public <O extends Record> Variable(Table<O> child, ForeignKey<O, VariableRecord> key) {
        super(child, key, VARIABLE);
    }

    @Override
    public Schema getSchema() {
        return FoundationCommons.FOUNDATION_COMMONS;
    }

    @Override
    public Identity<VariableRecord, ULong> getIdentity() {
        return Keys.IDENTITY_VARIABLE;
    }

    @Override
    public UniqueKey<VariableRecord> getPrimaryKey() {
        return Keys.KEY_VARIABLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<VariableRecord>> getKeys() {
        return Arrays.<UniqueKey<VariableRecord>>asList(Keys.KEY_VARIABLE_PRIMARY, Keys.KEY_VARIABLE_IDX_OWNER);
    }

    @Override
    public Variable as(String alias) {
        return new Variable(DSL.name(alias), this);
    }

    @Override
    public Variable as(Name alias) {
        return new Variable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Variable rename(String name) {
        return new Variable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Variable rename(Name name) {
        return new Variable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<ULong, String, String, UByte, UByte, ULong, String, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
